# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--api.dashboard=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=timothy@solovps.cloud"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      # The HTTP port
      - "80:80"
      # The HTTPS port
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      # - "8080:8080"
    volumes:
      - letsencrypt:/letsencrypt
      # So that Traefik can listen to Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.solovps.cloud`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$/il8.wDB$$PX32bSi3gmzBWd8HfI.Rr."

  pawprint:
    image: ghcr.io/tdboudreau/pawprint:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pawprint.rule=Host(`solovps.cloud`)"
      - "traefik.http.routers.pawprint.entrypoints=websecure"
      - "traefik.http.routers.pawprint.tls.certresolver=myresolver"
    secrets:
      - db-password
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=pawprint
      - POSTGRES_PORT=5432
      - POSTGRES_SSLMODE=disable
    expose:
      - "8080"
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
      db:
        condition: service_healthy

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker compose up`.
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    environment:
      - POSTGRES_DB=pawprint
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # mailhog: a fake smtp server with a web interface
  mailhog:
    image: "jcalonso/mailhog:latest"
    ports:
      - "1025:1025"
      - "8025:8025"
    deploy:
      mode: replicated
      replicas: 1

volumes:
  db-data:
  letsencrypt:

secrets:
  db-password:
    file: db/password.txt
